<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="LookAt">

    <!-- 로그인 -->
    <select id="login" parameterType="map" resultType="com.lookat.vo.MemberVO">
    	SELECT *
    	FROM MEMBER
    	WHERE MEMBER_LOGID = #{id}
    	AND MEMBER_PASSWORD = #{pw}
    </select>
    
     <!-- 아이디 찾기 -->
     <select id="findId" parameterType="map" resultType="string">
     	SELECT MEMBER_LOGID
		FROM MEMBER
		WHERE MEMBER_NAME = #{name}
		AND TO_CHAR (TO_DATE(MEMBER_BIRTHDAY, 'YYYY-MM-DD'), 'YYMMDD') = #{birthday}
		AND MEMBER_PHONENUM = #{number}
     </select>
     
     <!-- 비밀번호 찾기 -->
     <select id="findPwd" parameterType="map" resultType="string">
     	SELECT MEMBER_PASSWORD
		FROM MEMBER
		WHERE MEMBER_LOGID = #{id}
		AND TO_CHAR (TO_DATE(MEMBER_BIRTHDAY, 'YYYY-MM-DD'), 'YYMMDD') = #{birthday}
		AND MEMBER_PHONENUM = #{number}
     </select>
    
    <!-- 영화 -->
    <!-- 영화 상세정보 가져오기 -->
    <select id="movieDetail" parameterType="string" resultType="com.lookat.vo.MovieVO">
    	SELECT * FROM MOVIE WHERE MOVIE_ID = #{movieId}
    </select>
    
    <!-- 영화 목록 가져오기 -->
    <select id="movieList" resultType="com.lookat.vo.MovieVO">
    	SELECT * FROM MOVIE ORDER BY MOVIE_NAME
    </select>
    
    <!-- 별점순 정렬한 영화 목록 -->
    <select id="movieListOrderByStar" resultType="com.lookat.vo.MovieVO">
    	SELECT * FROM MOVIE ORDER BY MOVIE_STAR DESC
    </select>
    
    <!-- 예매율순 정렬한 영화 목록 -->
    <!-- 일단 영화ID, 영화제목, 영화이미지경로만 가져옴 -->
    <select id="movieListOrderByReserve" resultType="com.lookat.dto.MovieDTO">
    	SELECT M.MOVIE_ID, M.MOVIE_NAME, COUNT(RES.RESERVE_NUM) AS RESERVE_COUNT, M.MOVIE_IMG_PATH
		FROM MOVIE M
		LEFT JOIN RUNTIME RUN ON M.MOVIE_ID = RUN.MOVIE_ID
		LEFT JOIN RESERVE RES ON RUN.RUNTIME_ID = RES.RUNTIME_ID
		GROUP BY M.MOVIE_ID, M.MOVIE_NAME, M.MOVIE_IMG_PATH
		ORDER BY RESERVE_COUNT DESC
    </select>
    
    <!-- 영화 개수 가져오기 -->
    <select id="movieCnt" resultType="int">
    	SELECT COUNT(*) FROM MOVIE
    </select>
    
    <!-- 영화 이름 가져오기 -->
    <select id="getMovieName" parameterType="string" resultType="string">
    	SELECT MOVIE_NAME FROM MOVIE WHERE MOVIE_ID = #{movieId}
    </select>
    
    
    
    
    <!-- 관리자 -->
    <!-- 1. 영화 등록하기 -->
    <insert id="movieInsert" parameterType="com.lookat.dto.MovieDTO">
    	INSERT INTO MOVIE
		VALUES (MOVIE_ID_SEQ.NEXTVAL, #{movieName}, #{movieType}, #{movieDirector}
					, #{movieStudio}, #{movieActor}, #{movieStory}, #{movieImgPath}, #{movieStar} )
    </insert>
    
    <!-- 영화 삭제하기 -->
    <delete id="movieDelete" parameterType="string">
    	DELETE FROM MOVIE WHERE MOVIE_ID IN
    	<foreach item="movieId" index="index" collection="array" open="(" separator="," close=")">
    		#{movieId}
    	</foreach>
    </delete>
    
    <!-- 영화 수정 : 일치하는 영화 이름, 영화 감독 이름 조회 -->
    <select id="movieUpdateSearch" parameterType="map" resultType="com.lookat.vo.MovieVO">
    	SELECT *
		FROM MOVIE
		WHERE MOVIE_NAME = #{searchMovieName}
		AND MOVIE_DIRECTOR = #{searchDirectorName}
    </select>
    
    <!-- 영화 수정 업데이트 하기 -->
    <update id="movieUpdate" parameterType="com.lookat.dto.MovieDTO">
    	UPDATE MOVIE
		SET MOVIE_NAME = #{movieName}
    		, MOVIE_TYPE = #{movieType}
		    , MOVIE_DIRECTOR = #{movieDirector}
		    , MOVIE_STUDIO = #{movieStudio}
		    , MOVIE_ACTOR = #{movieActor}
		    , MOVIE_STORY = #{movieStory}
		    , MOVIE_IMG_PATH = #{movieImgPath}
		    , MOVIE_STAR = #{movieStar}
		WHERE MOVIE_ID = #{movieId}
    </update>
    
    
    
    <!-- 2. 회원 관리 -->
    <!-- 전체 회원수 (일반 회원 + 멤버십 회원) -->
    <select id="getTotalMemberCount" resultType="int">
    	SELECT COUNT(*) 
		FROM MEMBER 
		WHERE MEMBER_TYPE = 'Member'
    </select>
    
    <!-- 일반 회원수 -->
    <select id="MemberCount" resultType="int">
	    SELECT COUNT(*) 
		FROM MEMBER m
		LEFT JOIN MEMBERSHIP s ON m.MEMBER_ID = s.MEMBER_ID
		WHERE s.MEMBER_ID IS NULL
		AND m.MEMBER_TYPE = 'Member'
    </select>
    
    <!-- 멤버십 회원수 -->
    <select id="getMembershipCount" resultType="int">
    	SELECT COUNT(*) FROM MEMBERSHIP
    </select>
    
    
    
    <!-- 일반 사용자 전체 데이터 조회 -->
    <select id="getMemberList" resultType="com.lookat.vo.MemberVO">
    	SELECT *
		FROM MEMBER
		WHERE MEMBER_TYPE = 'Member'
    </select>
    
    <!-- 멤버십 회원 정보 조회 -->
    <select id="getMembershipList" resultType="com.lookat.vo.MemberAndMembershipVO">
	    SELECT m.*, s.* 
		FROM MEMBER m, MEMBERSHIP S
		WHERE m.MEMBER_ID = s.MEMBER_ID
    </select>
    
    <!-- 전체 회원에서 회원 조회 -->
    <select id="searchMember" parameterType="map" resultType="com.lookat.vo.MemberAndMembershipVO">
		SELECT m.*, s.* 
		FROM MEMBER m
		LEFT JOIN MEMBERSHIP s ON m.MEMBER_ID = s.MEMBER_ID
		WHERE MEMBER_TYPE = 'Member'
		AND m.MEMBER_NAME = #{name}
		AND TO_CHAR (TO_DATE(m.MEMBER_BIRTHDAY, 'YYYY-MM-DD'), 'YYMMDD') = #{birthday}
		AND m.MEMBER_PHONENUM = #{phoneNum}
    </select>
    
    
    <!-- 3. 매출 관리 등등 -->
    <!-- 전체 영화관 목록 -->
    <select id="getTheaterList" resultType="com.lookat.vo.TheaterVO">
    	SELECT * FROM THEATER
    </select>
    
    <!-- 전체 영화과 수 -->
    <select id="getTheaterCount" resultType="int">
    	SELECT COUNT(*) FROM THEATER
    </select>
    
    <!-- 각 영화관 지점별 매출 -->
    <select id="getTheaterSaleList" resultType="com.lookat.dto.TheaterDTO">
   		SELECT T.THEATER_ID, T.THEATER_NAME, SUM(S.SEAT_PRICE) AS THEATER_SALE
		FROM RESERVE RES
		LEFT JOIN SEAT S ON RES.SEAT_ID = S.SEAT_ID
		LEFT JOIN RUNTIME RUN ON RES.RUNTIME_ID = RUN.RUNTIME_ID
		LEFT JOIN MOVIE M ON RUN.MOVIE_ID = M.MOVIE_ID
		LEFT JOIN THEATER T ON RES.THEATER_ID = T.THEATER_ID
		GROUP BY T.THEATER_ID, T.THEATER_NAME
		ORDER BY THEATER_SALE DESC
    </select>
	
	<!-- 영화관(CGV) 총매출 -->
	<select id="getTotalSale" resultType="int">
		SELECT SUM(S.SEAT_PRICE) AS TOTAL_SALE
		FROM RESERVE RES
		LEFT JOIN SEAT S ON RES.SEAT_ID = S.SEAT_ID
		LEFT JOIN RUNTIME RUN ON RES.RUNTIME_ID = RUN.RUNTIME_ID
		LEFT JOIN MOVIE M ON RUN.MOVIE_ID = M.MOVIE_ID
		LEFT JOIN THEATER T ON RES.THEATER_ID = T.THEATER_ID
	</select>
	
	<!-- 영화관별 상영 영화, 영화별 매출 순위 -->
	<select id="getTheaterMovieSaleList" parameterType="string" resultType="com.lookat.dto.TheaterDTO">
		SELECT T.THEATER_NAME AS THEATER_NAME
                    , M.MOVIE_ID
       				, M.MOVIE_NAME AS MOVIE_NAME
       				, SUM(S.SEAT_PRICE) AS MOVIE_SALE
		FROM RESERVE RES
		LEFT JOIN SEAT S ON RES.SEAT_ID = S.SEAT_ID
		LEFT JOIN RUNTIME RUN ON RES.RUNTIME_ID = RUN.RUNTIME_ID
		LEFT JOIN MOVIE M ON RUN.MOVIE_ID = M.MOVIE_ID
		LEFT JOIN THEATER T ON RES.THEATER_ID = T.THEATER_ID
		WHERE T.THEATER_ID = #{theaterId}
		GROUP BY T.THEATER_NAME, M.MOVIE_NAME, M.MOVIE_ID
		ORDER BY MOVIE_SALE DESC
	</select>
	
	<!-- 영화관 이름 -->
	<select id="getTheaterName" parameterType="string" resultType="string">
		SELECT THEATER_NAME
		FROM THEATER
		WHERE THEATER_ID = #{theaterId}
	</select>
	
	<!-- 영화관 1개의 총매출 조회-->
	<select id="getTheaterSale" parameterType="string" resultType="int">
		SELECT SUM(S.SEAT_PRICE) AS THEATER_SALE
		FROM THEATER T
		JOIN RESERVE RES ON T.THEATER_ID = RES.THEATER_ID
		JOIN SEAT S ON RES.SEAT_ID = S.SEAT_ID
		WHERE T.THEATER_ID = #{theaterId}
		GROUP BY T.THEATER_NAME
		ORDER BY T.THEATER_NAME
	</select>
	
	
	<!-- 4. 통계 -->
	<!-- 성별에 따른 특정 영화 선호도  : 여성 -->
	<select id="getMoviePreferByFemale" parameterType="string" resultType="double">
		SELECT 
		    ROUND(SUM(S.SEAT_PRICE) * 100.0 / 
		        (SELECT SUM(S2.SEAT_PRICE)
		         FROM RESERVE RES2
		         JOIN RUNTIME RUN2 ON RES2.RUNTIME_ID = RUN2.RUNTIME_ID
		         JOIN MOVIE MOV2 ON RUN2.MOVIE_ID = MOV2.MOVIE_ID
		         JOIN SEAT S2 ON RES2.SEAT_ID = S2.SEAT_ID
		         WHERE MOV2.MOVIE_ID = 1), 2) AS PERCENTAGE
		FROM RESERVE RES
		JOIN MEMBER MEM ON RES.MEMBER_ID = MEM.MEMBER_ID
		JOIN RUNTIME RUN ON RES.RUNTIME_ID = RUN.RUNTIME_ID
		JOIN MOVIE MOV ON RUN.MOVIE_ID = MOV.MOVIE_ID
		JOIN SEAT S ON RES.SEAT_ID = S.SEAT_ID
		WHERE MOV.MOVIE_ID = #{movieId}
		AND MEM.MEMBER_SEX= 'F'
		GROUP BY MEM.MEMBER_SEX, MOV.MOVIE_ID, MOV.MOVIE_NAME
		ORDER BY PERCENTAGE DESC
	</select>
	
	<!-- 성별에 따른 특정 영화 선호도  : 남성 -->
	<select id="getMoviePreferByMale" parameterType="string" resultType="double">
		SELECT 
		    ROUND(SUM(S.SEAT_PRICE) * 100.0 / 
		        (SELECT SUM(S2.SEAT_PRICE)
		         FROM RESERVE RES2
		         JOIN RUNTIME RUN2 ON RES2.RUNTIME_ID = RUN2.RUNTIME_ID
		         JOIN MOVIE MOV2 ON RUN2.MOVIE_ID = MOV2.MOVIE_ID
		         JOIN SEAT S2 ON RES2.SEAT_ID = S2.SEAT_ID
		         WHERE MOV2.MOVIE_ID = 1), 2) AS PERCENTAGE
		FROM RESERVE RES
		JOIN MEMBER MEM ON RES.MEMBER_ID = MEM.MEMBER_ID
		JOIN RUNTIME RUN ON RES.RUNTIME_ID = RUN.RUNTIME_ID
		JOIN MOVIE MOV ON RUN.MOVIE_ID = MOV.MOVIE_ID
		JOIN SEAT S ON RES.SEAT_ID = S.SEAT_ID
		WHERE MOV.MOVIE_ID = #{movieId}
		AND MEM.MEMBER_SEX= 'M'
		GROUP BY MEM.MEMBER_SEX, MOV.MOVIE_ID, MOV.MOVIE_NAME
		ORDER BY PERCENTAGE DESC
	</select>
	
	
	<!-- 소인언니 기능구현 추가 시작 -->
	<!-- 회원가입 -->
	 <!-- 회원 존재여부 체크 쿼리 -->
    <select id="checkMemberExists" parameterType="string" resultType="int">
	    SELECT COUNT(*)
	    FROM MEMBER
	    WHERE MEMBER_BIRTHDAY = #{memberBirthday}
	    AND MEMBER_PHONENUM = #{memberPhonenum}
	    AND MEMBER_NAME = #{memberName}
	</select>
	
	<!-- 닉네임 중복 체크 쿼리 -->
    <select id="checkNicknameExists" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM MEMBER
        WHERE MEMBER_NICKNAME = #{memberNickname}
    </select>
	
	<!-- 회원가입 정보 DB입력 쿼리 -->
    <insert id="insertMember" parameterType="com.lookat.dto.MemberDTO">
        INSERT INTO MEMBER
        (MEMBER_ID, MEMBER_NAME, MEMBER_SEX, MEMBER_AGE, MEMBER_NICKNAME,
         MEMBER_BIRTHDAY, MEMBER_TYPE, MEMBER_LOGID, MEMBER_PASSWORD, MEMBER_PHONENUM)
        VALUES (MEMBER_ID_SEQ.NEXTVAL, #{memberName}, #{memberSex}, #{memberAge}, #{memberNickname},
                #{memberBirthday}, 'Member', #{memberLogId}, #{memberPassword}, #{memberPhonenum})
    </insert>
	
	
	
</mapper>